NET Framework 是一种技术，该技术支持生成和运行下一代应用程序和 XML Web Services。 .NET Framework 旨在实现下列目标：
	提供一个一致的面向对象的编程环境，而无论对象代码是在本地存储和执行，还是在本地执行但在 Internet 上分布，或者是在远程执行的。
	提供一个将软件部署和版本控制冲突最小化的代码执行环境。
	提供一个可提高代码（包括由未知的或不完全受信任的第三方创建的代码）执行安全性的代码执行环境。
	提供一个可消除脚本环境或解释环境的性能问题的代码执行环境。
	使开发人员的经验在面对类型大不相同的应用程序（如基于 Windows 的应用程序和基于 Web 的应用程序）时保持一致。
	按照工业标准生成所有通信，以确保基于 .NET Framework 的代码可与任何其他代码集成。
.NET Framework 包括公共语言运行时和 .NET Framework 类库。 公共语言运行时是 .NET Framework 的基础。 您可以将运行时看作一个在执行时管理代码的代理，它提供内存管理、线程管理和远程处理等核心服务，并且还强制实施严格的类型安全以及可提高安全性和可靠性的其他形式的代码准确性。 事实上，代码管理的概念是运行时的基本原则。 以运行时为目标的代码称为托管代码，而不以运行时为目标的代码称为非托管代码。 类库是一个综合性的面向对象的可重用类型集合，您可以使用它来开发多种应用程序，这些应用程序包括传统的命令行或图形用户界面 (GUI) 应用程序，还包括基于 ASP.NET 提供的最新创新的应用程序（如 Web 窗体和 XML Web Services）。
.NET Framework 可由非托管组件承载，这些组件将公共语言运行时加载到它们的进程中并启动托管代码的执行，从而创建一个可以同时利用托管和非托管功能的软件环境。 .NET Framework 不但提供若干个运行时宿主，而且还支持第三方运行时宿主的开发。
例如，ASP.NET 承载运行时以为托管代码提供可伸缩的服务器端环境。 ASP.NET 直接使用运行时以启用 ASP.NET 应用程序和 XML Web Services（本主题稍后将对这两者进行讨论）。
Internet Explorer 是承载运行时（以 MIME 类型扩展的形式）的非托管应用程序的一个示例。 使用 Internet Explorer 承载运行时使您能够在 HTML 文档中嵌入托管组件或 Windows 窗体控件。 以这种方式承载运行时可使托管移动代码成为可能，不过它需要进行只有托管代码才能提供的重大改进（如不完全受信任的执行和独立的文件存储）。